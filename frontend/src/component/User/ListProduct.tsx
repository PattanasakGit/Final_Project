import '../../css/Background.css';
import { Drawer,Tag, Empty } from 'antd'
import { Select, MenuItem } from '@mui/material';
import { useState, useEffect, SetStateAction } from 'react';
import { fetchCategories, fillter_product } from '../WebSystem/HTTP_Request ';
import { Grid, Card, CardContent, Typography, Pagination } from '@mui/material';
import { MenuUnfoldOutlined , SearchOutlined } from '@ant-design/icons';

const colors = ["FF8C32", "D7A86E", "A64B2A", "8E3200"];

const ProductsGrid = () => {
  const [products, setProducts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [TotalProducts, setTotalProducts] = useState(0);
  const [type, settype] = useState("");
  const [category, setcategory] = useState("");
  const [minPrice, setminPrice] = useState(0);
  const [maxPrice, setmaxPrice] = useState(0);
  const [nameProduct, setnameProduct] = useState("");
  const [categories, setCategories] = useState([]); //categories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleTypeChange = (event: any) => {
    settype(event.target.value);
  };
  let data_fiter = {
    "nameProduct": nameProduct,
    "category": category,
    "type": type,
    "minPrice": minPrice,
    "maxPrice": maxPrice
  }
  //================== ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Drawer ==============================
  const [open, setOpen] = useState(false);
  const showDrawer = () => { setOpen(true); };
  const onClose = () => { setOpen(false); };
  //==============================================================
  useEffect(() => {
    const fetchCategoriesData = async () => {
      const fetchedCategories: any = await fetchCategories(); // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å backend
      setCategories(fetchedCategories);
    };
    fetchCategoriesData();
    filter_searchProducts();
  }, [currentPage, category]);
  
  const filter_searchProducts = async () => {
    const pageSize = 24;
    const data = await fillter_product(data_fiter);
    const totalProducts = data.length;
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const productsData = data.slice(startIndex, endIndex);
    setProducts(productsData);
    setTotalProducts(totalProducts);
  };
  //============================================================================
  const Search = () => { //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    filter_searchProducts();
    onClose(); //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î drawer
  };

  const handleKeyPress = (event: any) => {
    if (event.key === 'Enter') {
      Search();
    }
  };

  const send_data_to_Product = (data: any) => {
    window.location.href = '/Product/' + data.ID;
  };
  const handlePageChange = (_event: any, newPage: SetStateAction<number>) => {
    setCurrentPage(newPage);
    window.scrollTo(0, 515); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à
  };
  const handleSetTextParam = (value: string) => {
    setcategory(value);
    setCurrentPage(1);
    setnameProduct("");
  }
  const clear_all_filter = async () => {
    settype('');
    setcategory('');
    setminPrice(0);
    setmaxPrice(0);
    setnameProduct('');

    let blank_data_fiter = {
      "nameProduct": "",
      "category": "",
      "type": "",
      "minPrice": 0,
      "maxPrice": 0
    }

    const pageSize = 24;
    const data = await fillter_product(blank_data_fiter);
    const totalProducts = data.length;
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const productsData = data.slice(startIndex, endIndex);
    setProducts(productsData);
    setTotalProducts(totalProducts);
  };

  const check_price = (price: number) => {
    if (price === 0) {
      return "";
    } else {
      return price;
    }
  }

  //------------------------ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà --------------------------
  const [showAllItems, setShowAllItems] = useState(false);
  const [itemsPerPage_CP, setItemsPerPage_CP] = useState(3);

  useEffect(() => {
    const handleResize = () => {
      const windowWidth = window.innerWidth;
      if (windowWidth < 576) { // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (mobile)
        setItemsPerPage_CP(windowWidth/130);
      } else if (windowWidth >= 576 && windowWidth < 992) { // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ iPad
        setItemsPerPage_CP(windowWidth/130);
      } else { // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ desktop
        setItemsPerPage_CP(windowWidth/130);
      }
    };
    // ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    window.addEventListener('load', handleResize);
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('load', handleResize);
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  //----------------------------------------------------------------
  const handleCategoryClick = (categoryName: any) => {
    handleSetTextParam(categoryName);
    setShowAllItems(false);
    window.scrollTo(0, 515);
  };

  const handleToggleShowAll = () => {
    setShowAllItems((prev) => !prev);
  };

  const getVisibleCategories = () => {
    return showAllItems ? categories : categories.slice(0, itemsPerPage_CP);
  };

  function format_Price(number: number) {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  }
  //============================================================================
  return (
    <div>
      <Drawer title="Filter ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" placement="left" onClose={onClose} visible={open} style={{ backgroundColor: 'rgba(255, 255, 255, 0.425)', backdropFilter: 'blur(70px)' }} className='TP_header_drawer'>
        <h2 className='TP_Text_in_Drawer'> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ </h2>
        <div style={{ display: 'flex', justifyContent: 'center' }}>
          <Select value={category} onChange={(event) => handleSetTextParam(event.target.value as string)} className='TP_combobox_search'>
            <MenuItem key="all" value="">
              <img src={'https://img.icons8.com/?size=512&id=IJNt9jGwqy9N&format=png'} style={{ height: '30px', width: '30px', marginRight: '1rem' }} /> ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </MenuItem>
            {categories.map((category: any) => (
              <MenuItem key={category.ID} value={category.CP_NAME}>
                <img src={category.CP_ICON} style={{ height: '30px', width: '30px', marginRight: '1rem' }} />
                {category.CP_NAME}
              </MenuItem>
            ))}
          </Select>
        </div>
        <div style={{ display: 'flex', justifyContent: 'center' }} className='TP_Box_radio'>
          <label className="TP_label"> <input type="radio" value="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠ 1" checked={type === '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠ 1'} onChange={handleTypeChange} />
            <span className="TP_span">‡∏°‡∏∑‡∏≠1</span>
          </label>
          <label className="TP_label"> <input type="radio" value="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠ 2" checked={type === '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠ 2'} onChange={handleTypeChange} />
            <span className="TP_span">‡∏°‡∏∑‡∏≠2</span>
          </label>
        </div>

        <div>
          <label style={{ fontSize: '18px', marginBottom: '6px', color: '#333' }}> ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ : </label>
          <input type="number" id="minAmount" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥" className='ThepatforInput'
            style={{ width: '50%', height: '60%', backgroundColor: 'rgb(255, 255, 255, 0.5)', margin: '1rem', }}
            value={check_price(minPrice)} onChange={(event) => setminPrice(parseInt(event.target.value))}
          />
        </div>

        <div>
          <label style={{ fontSize: '18px', marginBottom: '6px', color: '#333' }}> ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î : </label>
          <input type="number" id="maxAmount" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" className='ThepatforInput'
            style={{ width: '50%', height: '60%', backgroundColor: 'rgb(255, 255, 255, 0.5)', margin: '1rem', marginTop: 0 }}
            value={check_price(maxPrice)} onChange={(event) => setmaxPrice(parseInt(event.target.value))}
          />
        </div>

        <center>
          {Object.values(data_fiter).every((value) => !value) ? (<h1></h1>) : (
            <>
              <h3 style={{ backgroundColor: 'rgba(255, 255, 255, 0.425)', padding: '5px', borderRadius: '5px', color: '#333', fontSize: '18px' }}
              >‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Filter ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ</h3>
              {checkFilter(data_fiter).map((item, index) => (
                <div key={index}>
                  {Object.keys(item).map((key) => (
                    <p key={key} style={{ fontSize: '16px', padding: '6px', margin: '0', backgroundColor: `#${colors[index % colors.length]}`, color: "#FFF", border: "1px solid #fff" }}>
                      {key === "category" ? "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" : key === "type" ? "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" : key === "minPrice" ? "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" : key === "maxPrice" ? "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" : key}
                      : {item[key]}
                    </p>
                  ))}
                </div>
              ))}
            </>
          )}
        </center>
        <button onClick={clear_all_filter} className="button-clear-filter">
          üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á filter ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        </button>
        <button onClick={Search} className="button-filter-search">
          ‚ú® ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        </button>
      </Drawer>

      {/* --------------------------------------- ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà --------------------------------------------------------- */}
      <div className="bg_category_home_page" >
        <div className="tp-category-container">
          <Card className={`tp-category-card`} onClick={() => handleCategoryClick('')}>
            <img src={'https://img.icons8.com/?size=512&id=IJNt9jGwqy9N&format=png'} className="tp-category-card-image" />
            <div className="tp-category-name">‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î</div>
          </Card>
          {getVisibleCategories().map((category: any) => (
            <Card key={category.ID} className={`tp-category-card`} onClick={() => handleCategoryClick(category.CP_NAME)} >
              <img src={category.CP_ICON} className="tp-category-card-image" />
              <div className="tp-category-name">{category.CP_NAME}</div>
            </Card>
          ))}
        </div>

        {categories.length > itemsPerPage_CP && (
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>
            <button onClick={handleToggleShowAll} className='show_more_category'>
              {showAllItems ? '‡πÅ‡∏™‡∏î‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á' : '‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}
            </button>
          </div>
        )}
      </div>
      {/* -------------------------------------------------------------------------------------------------------- */}
      <center>
        {Object.keys(data_fiter).every((key) => key === "nameProduct" || !data_fiter[key as keyof unknown]) ? (<h1></h1>) : (
          <>
            <h3 className='text_alert_on_search_box'>
              <img src="https://img.icons8.com/?size=512&id=1Zt4ZM9tGGrG&format=png" style={{ height: '25px', marginRight: '5px' }} />
              ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Filter
              <button onClick={clear_all_filter} className='button-clear-filter_text_alert'> üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Filter </button>
            </h3>
          </>
        )}
      </center>

      <div className="TP_Box_for_search">
        <div style={{ width: "15%",margin:0}}>
          <button className="TP_btn_sell" onClick={showDrawer}> <MenuUnfoldOutlined /> </button>
        </div>
        <div style={{ width: "70%" }}>
          <input className="ThepatforInput_search" value={nameProduct} onChange={(event) => setnameProduct(event.target.value)}
            style={{ borderRadius: '15px', backgroundColor: '#ffffff', paddingLeft: '5%' }} onKeyPress={handleKeyPress}
          />
        </div>
        <div style={{ width: "15%",margin:0}}>
          <button className="TP_btn_s" onClick={Search}> <SearchOutlined /> </button>
        </div>
      </div>

      <div className="table_show_products">
        {/* ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á */}
        {products.length > 0 ? (
          <div>
            <Grid container spacing={2}>
              {/* ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏Å‡πà‡∏≠‡∏ô */}
              {products
                .filter((product: any) => product.P_ADS === true)
                .map((product: any) => (
                  <Grid item xs={6} sm={4} md={3} lg={2} key={product.ID}>
                    <Card sx={{ width: '100%', borderRadius: '10px', backgroundColor: '#FFFDE8', position: 'relative', boxShadow: ' 0 0 0 4px #FFCC48' }} className='product_cardContainer' >
                      <div style={{ display: 'flex', justifyContent: 'flex-end', position: 'absolute', top: '0', right: '0', padding: '10px' }}>
                        <img src="https://firebasestorage.googleapis.com/v0/b/yakkai.appspot.com/o/images%2FSystem%2FICON%2FPremium%20ICON.png?alt=media&token=2da96bd0-d868-4a85-9f52-becfe26fda9b" style={{ height: '40px', width: '40px', filter: 'drop-shadow(3px 3px 2px rgba(0, 0, 0, 0.9))' }} />
                      </div>
                      <CardContent sx={{ padding: 0 }} onClick={() => send_data_to_Product(product)} >
                        <div className='container_show_img_in_card'>
                          {product.P_IMG.length > 0 ? (
                            <img src={product.P_IMG[0]}  />
                          ) : (
                            <div className='TP_text_product_seller' style={{ color: '#D8D9DA' }}>
                              <p>‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î<br />‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
                              <Empty />
                            </div>
                          )}
                        </div>
                        <p   className='TP_font_in_card' >
                          {product.P_NAME}
                        </p>
                        <Typography variant="body1" component="div" className='TP_font'>
                          ‡∏£‡∏≤‡∏Ñ‡∏≤: {format_Price(product.P_PRICE)} ‡∏ö‡∏≤‡∏ó
                        </Typography>
                        <Typography variant="body1" component="div" fontSize={'13px'} marginTop={1}>
                          {product.P_TYPE === "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠ 1" ? (
                            <Tag color="green" className='TP_font'> {product.P_TYPE} </Tag>
                          ) : (
                            <Tag color="gold" className='TP_font'> {product.P_TYPE} </Tag>
                          )}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}

              {/* ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤ */}
              {products
                .filter((product: any) => product.P_ADS !== true)
                .map((product: any) => (
                  <Grid item xs={6} sm={4} md={3} lg={2} key={product.ID}>
                    <Card sx={{ width: '100%', borderRadius: '10px' }} className='product_cardContainer' >
                      <CardContent sx={{ padding: 0 }} onClick={() => send_data_to_Product(product)} >
                        <div className='container_show_img_in_card'>
                          {product.P_IMG.length > 0 ? (
                            <img src={product.P_IMG[0]}  />
                          ) : (
                            <div className='TP_text_product_seller' style={{ color: '#D8D9DA' }}>
                              <p>‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î<br />‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
                              <Empty />
                            </div>
                          )}
                        </div>
                        <p   className='TP_font_in_card' >
                          {product.P_NAME}
                        </p>
                        <Typography variant="body1" component="div" className='TP_font'>
                          ‡∏£‡∏≤‡∏Ñ‡∏≤: {format_Price(product.P_PRICE)} ‡∏ö‡∏≤‡∏ó
                        </Typography>
                        <Typography variant="body1" component="div" fontSize={'13px'} marginTop={1}>
                          {product.P_TYPE === "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠ 1" ? (
                            <Tag color="green" className='TP_font'> {product.P_TYPE} </Tag>
                          ) : (
                            <Tag color="gold" className='TP_font'> {product.P_TYPE} </Tag>
                          )}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
            </Grid>
            <div style={{ display: "flex", justifyContent: "center", marginTop: "20px" }}>
              <Pagination
                count={Math.ceil(TotalProducts / 24)}
                page={currentPage}
                onChange={handlePageChange}
                color="primary"
                showFirstButton
                showLastButton
                siblingCount={1}
                boundaryCount={1}
                shape="rounded"
                variant="outlined"
              />
            </div>
          </div>
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        ) : (
          <div className='TP_text_product_seller' style={{ color: '#D8D9DA' }}>
            <Empty description={false} />
            <h2 style={{ color: '#454545' }}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h2>
          </div>
        )}
      </div>
    </div >
  );
};
export default ProductsGrid;

//====================================  ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ===================================================
//‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ä‡πâ filter ‡∏à‡∏∞ return ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
const checkFilter = (data: any) => {
  const data_for_filter_check = { nameProduct: "", type: "", category: "", minPrice: 0, maxPrice: 0, };
  const result: any[] = [];
  Object.keys(data).forEach((key) => {
    if (data[key] !== data_for_filter_check[key as keyof typeof data_for_filter_check]) {
      result.push({ [key]: data[key] });
    }
  });
  return result;
};